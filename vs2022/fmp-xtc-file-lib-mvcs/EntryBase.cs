
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using Grpc.Net.Client;
using XTC.FMP.LIB.MVCS;

namespace XTC.FMP.MOD.File.LIB.MVCS
{

    /// <summary>
    /// 模块选项
    /// </summary>
    public class Options : UserData
    {
        /// <summary>
        /// 获取GRPC通道
        /// </summary>
        public GrpcChannel? getChannel()
        {
            return channel_;
        }

        /// <summary>
        /// 设置GRPC通道
        /// </summary>
        /// <param name="_channel">GRPC通道</param>
        public void setChannel(GrpcChannel? _channel)
        {
            channel_ = _channel;
        }

        /// <summary>
        /// GRPC通道
        /// </summary>
        private GrpcChannel? channel_;
    }

    /// <summary>
    /// 模块入口基类
    /// </summary>
    public class EntryBase : UserData
    {
        /// <summary>
        /// 模块选项
        /// </summary>
        protected Options? options_;

        protected BucketFacade? facadeBucket_;
        protected BucketModel? modelBucket_;
        protected BucketView? viewBucket_;
        protected BucketController? controllerBucket_;
        protected BucketService? serviceBucket_;

        /// <summary>
        /// 获取Bucket的UI装饰层
        /// </summary>
        /// <returns>UI装饰层</returns>
        public BucketFacade? getBucketFacade()
        {
            return facadeBucket_;
        }

        protected HealthyFacade? facadeHealthy_;
        protected HealthyModel? modelHealthy_;
        protected HealthyView? viewHealthy_;
        protected HealthyController? controllerHealthy_;
        protected HealthyService? serviceHealthy_;

        /// <summary>
        /// 获取Healthy的UI装饰层
        /// </summary>
        /// <returns>UI装饰层</returns>
        public HealthyFacade? getHealthyFacade()
        {
            return facadeHealthy_;
        }

        protected ObjectFacade? facadeObject_;
        protected ObjectModel? modelObject_;
        protected ObjectView? viewObject_;
        protected ObjectController? controllerObject_;
        protected ObjectService? serviceObject_;

        /// <summary>
        /// 获取Object的UI装饰层
        /// </summary>
        /// <returns>UI装饰层</returns>
        public ObjectFacade? getObjectFacade()
        {
            return facadeObject_;
        }


        /// <summary>
        /// 注入MVCS框架
        /// </summary>
        /// <param name="_framework">MVCS框架</param>
        /// <param name="_options">模块选项</param>
        public void Inject(Framework _framework, Options _options)
        {
            framework_ = _framework;
            options_ = _options;
        }

        /// <summary>
        /// 静态注册
        /// </summary>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error staticRegister(Logger? _logger)
        {
            _logger?.Trace("StaticRegister");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注册数据层
            modelBucket_ = new BucketModel(BucketModel.NAME);
            framework_.getStaticPipe().RegisterModel(modelBucket_);
            // 注册视图层
            viewBucket_ = new BucketView(BucketView.NAME);
            framework_.getStaticPipe().RegisterView(viewBucket_);
            // 注册控制层
            controllerBucket_ = new BucketController(BucketController.NAME);
            framework_.getStaticPipe().RegisterController(controllerBucket_);
            // 注册服务层
            serviceBucket_ = new BucketService(BucketService.NAME);
            framework_.getStaticPipe().RegisterService(serviceBucket_);
            serviceBucket_.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            facadeBucket_ = new BucketFacade(BucketFacade.NAME);
            var bridgeBucket = new BucketViewBridge();
            bridgeBucket.service = serviceBucket_;
            facadeBucket_.setViewBridge(bridgeBucket);
            framework_.getStaticPipe().RegisterFacade(facadeBucket_);

            // 注册数据层
            modelHealthy_ = new HealthyModel(HealthyModel.NAME);
            framework_.getStaticPipe().RegisterModel(modelHealthy_);
            // 注册视图层
            viewHealthy_ = new HealthyView(HealthyView.NAME);
            framework_.getStaticPipe().RegisterView(viewHealthy_);
            // 注册控制层
            controllerHealthy_ = new HealthyController(HealthyController.NAME);
            framework_.getStaticPipe().RegisterController(controllerHealthy_);
            // 注册服务层
            serviceHealthy_ = new HealthyService(HealthyService.NAME);
            framework_.getStaticPipe().RegisterService(serviceHealthy_);
            serviceHealthy_.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            facadeHealthy_ = new HealthyFacade(HealthyFacade.NAME);
            var bridgeHealthy = new HealthyViewBridge();
            bridgeHealthy.service = serviceHealthy_;
            facadeHealthy_.setViewBridge(bridgeHealthy);
            framework_.getStaticPipe().RegisterFacade(facadeHealthy_);

            // 注册数据层
            modelObject_ = new ObjectModel(ObjectModel.NAME);
            framework_.getStaticPipe().RegisterModel(modelObject_);
            // 注册视图层
            viewObject_ = new ObjectView(ObjectView.NAME);
            framework_.getStaticPipe().RegisterView(viewObject_);
            // 注册控制层
            controllerObject_ = new ObjectController(ObjectController.NAME);
            framework_.getStaticPipe().RegisterController(controllerObject_);
            // 注册服务层
            serviceObject_ = new ObjectService(ObjectService.NAME);
            framework_.getStaticPipe().RegisterService(serviceObject_);
            serviceObject_.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            facadeObject_ = new ObjectFacade(ObjectFacade.NAME);
            var bridgeObject = new ObjectViewBridge();
            bridgeObject.service = serviceObject_;
            facadeObject_.setViewBridge(bridgeObject);
            framework_.getStaticPipe().RegisterFacade(facadeObject_);

            return Error.OK;
        }

        /// <summary>
        /// 动态注册
        /// </summary>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error dynamicRegister(Logger _logger)
        {
            _logger.Trace("DynamicRegister");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注册数据层
            modelBucket_ = new BucketModel(BucketModel.NAME);
            framework_.getDynamicPipe().PushModel(modelBucket_);
            // 注册视图层
            viewBucket_ = new BucketView(BucketView.NAME);
            framework_.getDynamicPipe().PushView(viewBucket_);
            // 注册控制层
            controllerBucket_ = new BucketController(BucketController.NAME);
            framework_.getDynamicPipe().PushController(controllerBucket_);
            // 注册服务层
            serviceBucket_ = new BucketService(BucketService.NAME);
            framework_.getDynamicPipe().PushService(serviceBucket_);
            serviceBucket_.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            facadeBucket_ = new BucketFacade(BucketFacade.NAME);
            var bridgeBucket = new BucketViewBridge();
            bridgeBucket.service = serviceBucket_;
            facadeBucket_.setViewBridge(bridgeBucket);
            framework_.getDynamicPipe().PushFacade(facadeBucket_);

            // 注册数据层
            modelHealthy_ = new HealthyModel(HealthyModel.NAME);
            framework_.getDynamicPipe().PushModel(modelHealthy_);
            // 注册视图层
            viewHealthy_ = new HealthyView(HealthyView.NAME);
            framework_.getDynamicPipe().PushView(viewHealthy_);
            // 注册控制层
            controllerHealthy_ = new HealthyController(HealthyController.NAME);
            framework_.getDynamicPipe().PushController(controllerHealthy_);
            // 注册服务层
            serviceHealthy_ = new HealthyService(HealthyService.NAME);
            framework_.getDynamicPipe().PushService(serviceHealthy_);
            serviceHealthy_.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            facadeHealthy_ = new HealthyFacade(HealthyFacade.NAME);
            var bridgeHealthy = new HealthyViewBridge();
            bridgeHealthy.service = serviceHealthy_;
            facadeHealthy_.setViewBridge(bridgeHealthy);
            framework_.getDynamicPipe().PushFacade(facadeHealthy_);

            // 注册数据层
            modelObject_ = new ObjectModel(ObjectModel.NAME);
            framework_.getDynamicPipe().PushModel(modelObject_);
            // 注册视图层
            viewObject_ = new ObjectView(ObjectView.NAME);
            framework_.getDynamicPipe().PushView(viewObject_);
            // 注册控制层
            controllerObject_ = new ObjectController(ObjectController.NAME);
            framework_.getDynamicPipe().PushController(controllerObject_);
            // 注册服务层
            serviceObject_ = new ObjectService(ObjectService.NAME);
            framework_.getDynamicPipe().PushService(serviceObject_);
            serviceObject_.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            facadeObject_ = new ObjectFacade(ObjectFacade.NAME);
            var bridgeObject = new ObjectViewBridge();
            bridgeObject.service = serviceObject_;
            facadeObject_.setViewBridge(bridgeObject);
            framework_.getDynamicPipe().PushFacade(facadeObject_);

            return Error.OK;
        }

        /// <summary>
        /// 静态注销
        /// </summary>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error staticCancel(Logger _logger)
        {
            _logger?.Trace("StaticCancel");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注销服务层
            framework_.getStaticPipe().CancelService(serviceBucket_);
            // 注销控制层
            framework_.getStaticPipe().CancelController(controllerBucket_);
            // 注销视图层
            framework_.getStaticPipe().CancelView(viewBucket_);
            // 注销UI装饰层
            framework_.getStaticPipe().CancelFacade(facadeBucket_);
            // 注销数据层
            framework_.getStaticPipe().CancelModel(modelBucket_);

            // 注销服务层
            framework_.getStaticPipe().CancelService(serviceHealthy_);
            // 注销控制层
            framework_.getStaticPipe().CancelController(controllerHealthy_);
            // 注销视图层
            framework_.getStaticPipe().CancelView(viewHealthy_);
            // 注销UI装饰层
            framework_.getStaticPipe().CancelFacade(facadeHealthy_);
            // 注销数据层
            framework_.getStaticPipe().CancelModel(modelHealthy_);

            // 注销服务层
            framework_.getStaticPipe().CancelService(serviceObject_);
            // 注销控制层
            framework_.getStaticPipe().CancelController(controllerObject_);
            // 注销视图层
            framework_.getStaticPipe().CancelView(viewObject_);
            // 注销UI装饰层
            framework_.getStaticPipe().CancelFacade(facadeObject_);
            // 注销数据层
            framework_.getStaticPipe().CancelModel(modelObject_);

            return Error.OK;
        }

        /// <summary>
        /// 动态注销
        /// </summary>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error dynamicCancel(Logger _logger)
        {
            _logger?.Trace("DynamicCancel");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注销服务层
            framework_.getDynamicPipe().PopService(serviceBucket_);
            // 注销控制层
            framework_.getDynamicPipe().PopController(controllerBucket_);
            // 注销视图层
            framework_.getDynamicPipe().PopView(viewBucket_);
            // 注销UI装饰层
            framework_.getDynamicPipe().PopFacade(facadeBucket_);
            // 注销数据层
            framework_.getDynamicPipe().PopModel(modelBucket_);

            // 注销服务层
            framework_.getDynamicPipe().PopService(serviceHealthy_);
            // 注销控制层
            framework_.getDynamicPipe().PopController(controllerHealthy_);
            // 注销视图层
            framework_.getDynamicPipe().PopView(viewHealthy_);
            // 注销UI装饰层
            framework_.getDynamicPipe().PopFacade(facadeHealthy_);
            // 注销数据层
            framework_.getDynamicPipe().PopModel(modelHealthy_);

            // 注销服务层
            framework_.getDynamicPipe().PopService(serviceObject_);
            // 注销控制层
            framework_.getDynamicPipe().PopController(controllerObject_);
            // 注销视图层
            framework_.getDynamicPipe().PopView(viewObject_);
            // 注销UI装饰层
            framework_.getDynamicPipe().PopFacade(facadeObject_);
            // 注销数据层
            framework_.getDynamicPipe().PopModel(modelObject_);

            return Error.OK;
        }

        /// <summary>
        /// MVCS框架
        /// </summary>
        private Framework? framework_;
    }
}

