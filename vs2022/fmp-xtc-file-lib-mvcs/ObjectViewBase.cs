
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.File.LIB.Bridge;

namespace XTC.FMP.MOD.File.LIB.MVCS
{
    /// <summary>
    /// Object视图层基类
    /// </summary>
    public class ObjectViewBase : View
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        public ObjectViewBase(string _uid) : base(_uid)
        {

        }


        /// <summary>
        /// 刷新Prepare的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectPrepareResponse的数据传输对象</param>
        public void RefreshProtoPrepare(Error _err, ObjectPrepareResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Prepare_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshPrepare(_dto);
        }

        /// <summary>
        /// 刷新Flush的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoFlush(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Flush_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshFlush(_dto);
        }

        /// <summary>
        /// 刷新Get的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectGetResponse的数据传输对象</param>
        public void RefreshProtoGet(Error _err, ObjectGetResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Get_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshGet(_dto);
        }

        /// <summary>
        /// 刷新Find的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectFindResponse的数据传输对象</param>
        public void RefreshProtoFind(Error _err, ObjectFindResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Find_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshFind(_dto);
        }

        /// <summary>
        /// 刷新Remove的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoRemove(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Remove_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshRemove(_dto);
        }

        /// <summary>
        /// 刷新List的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectListResponse的数据传输对象</param>
        public void RefreshProtoList(Error _err, ObjectListResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_List_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshList(_dto);
        }

        /// <summary>
        /// 刷新Search的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectSearchResponse的数据传输对象</param>
        public void RefreshProtoSearch(Error _err, ObjectSearchResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Search_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshSearch(_dto);
        }

        /// <summary>
        /// 刷新Publish的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectPublishResponse的数据传输对象</param>
        public void RefreshProtoPublish(Error _err, ObjectPublishResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Publish_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshPublish(_dto);
        }

        /// <summary>
        /// 刷新Preview的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectPreviewResponse的数据传输对象</param>
        public void RefreshProtoPreview(Error _err, ObjectPreviewResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Preview_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshPreview(_dto);
        }

        /// <summary>
        /// 刷新Retract的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoRetract(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Retract_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshRetract(_dto);
        }

        /// <summary>
        /// 刷新ConvertFromBase64的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectConvertFromBase64Response的数据传输对象</param>
        public void RefreshProtoConvertFromBase64(Error _err, ObjectConvertFromBase64ResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_ConvertFromBase64_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshConvertFromBase64(_dto);
        }

        /// <summary>
        /// 刷新ConvertFromUrl的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">ObjectConvertFromUrlResponse的数据传输对象</param>
        public void RefreshProtoConvertFromUrl(Error _err, ObjectConvertFromUrlResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IObjectUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_ConvertFromUrl_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshConvertFromUrl(_dto);
        }


        /// <summary>
        /// 获取直系数据层
        /// </summary>
        /// <returns>数据层</returns>
        protected ObjectModel? getModel()
        {
            if(null == model_)
                model_ = findModel(ObjectModel.NAME) as ObjectModel;
            return model_;
        }

        /// <summary>
        /// 获取直系服务层
        /// </summary>
        /// <returns>服务层</returns>
        protected ObjectService? getService()
        {
            if(null == service_)
                service_ = findService(ObjectService.NAME) as ObjectService;
            return service_;
        }

        /// <summary>
        /// 获取直系UI装饰层
        /// </summary>
        /// <returns>UI装饰层</returns>
        protected ObjectFacade? getFacade()
        {
            if(null == facade_)
                facade_ = findFacade(ObjectFacade.NAME) as ObjectFacade;
            return facade_;
        }

        /// <summary>
        /// 直系数据层
        /// </summary>
        private ObjectModel? model_;

        /// <summary>
        /// 直系服务层
        /// </summary>
        private ObjectService? service_;

        /// <summary>
        /// 直系UI装饰层
        /// </summary>
        private ObjectFacade? facade_;
    }
}

