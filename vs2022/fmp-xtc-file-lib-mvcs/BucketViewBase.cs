
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.File.LIB.Bridge;

namespace XTC.FMP.MOD.File.LIB.MVCS
{
    /// <summary>
    /// Bucket视图层基类
    /// </summary>
    public class BucketViewBase : View
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        public BucketViewBase(string _uid) : base(_uid)
        {

        }


        /// <summary>
        /// 刷新Make的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoMake(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Make_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshMake(_dto);
        }

        /// <summary>
        /// 刷新List的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">BucketListResponse的数据传输对象</param>
        public void RefreshProtoList(Error _err, BucketListResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_List_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshList(_dto);
        }

        /// <summary>
        /// 刷新Remove的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoRemove(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Remove_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshRemove(_dto);
        }

        /// <summary>
        /// 刷新Get的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">BucketGetResponse的数据传输对象</param>
        public void RefreshProtoGet(Error _err, BucketGetResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Get_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshGet(_dto);
        }

        /// <summary>
        /// 刷新Find的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">BucketFindResponse的数据传输对象</param>
        public void RefreshProtoFind(Error _err, BucketFindResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Find_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshFind(_dto);
        }

        /// <summary>
        /// 刷新Search的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">BucketSearchResponse的数据传输对象</param>
        public void RefreshProtoSearch(Error _err, BucketSearchResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Search_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshSearch(_dto);
        }

        /// <summary>
        /// 刷新Update的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoUpdate(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Update_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshUpdate(_dto);
        }

        /// <summary>
        /// 刷新ResetToken的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoResetToken(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_ResetToken_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshResetToken(_dto);
        }

        /// <summary>
        /// 刷新GenerateManifest的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">BucketGenerateManifestResponse的数据传输对象</param>
        public void RefreshProtoGenerateManifest(Error _err, BucketGenerateManifestResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_GenerateManifest_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshGenerateManifest(_dto);
        }

        /// <summary>
        /// 刷新Clean的数据
        /// </summary>
        /// <param name="_err">错误</param>
        /// <param name="_dto">UuidResponse的数据传输对象</param>
        public void RefreshProtoClean(Error _err, UuidResponseDTO _dto)
        {
            var bridge = getFacade()?.getUiBridge() as IBucketUiBridge; 
            if (!Error.IsOK(_err))
            {
                bridge?.Alert(string.Format("errcode_Clean_{0}", _err.getCode()), _err.getMessage());
                return;
            }
            bridge?.RefreshClean(_dto);
        }


        /// <summary>
        /// 获取直系数据层
        /// </summary>
        /// <returns>数据层</returns>
        protected BucketModel? getModel()
        {
            if(null == model_)
                model_ = findModel(BucketModel.NAME) as BucketModel;
            return model_;
        }

        /// <summary>
        /// 获取直系服务层
        /// </summary>
        /// <returns>服务层</returns>
        protected BucketService? getService()
        {
            if(null == service_)
                service_ = findService(BucketService.NAME) as BucketService;
            return service_;
        }

        /// <summary>
        /// 获取直系UI装饰层
        /// </summary>
        /// <returns>UI装饰层</returns>
        protected BucketFacade? getFacade()
        {
            if(null == facade_)
                facade_ = findFacade(BucketFacade.NAME) as BucketFacade;
            return facade_;
        }

        /// <summary>
        /// 直系数据层
        /// </summary>
        private BucketModel? model_;

        /// <summary>
        /// 直系服务层
        /// </summary>
        private BucketService? service_;

        /// <summary>
        /// 直系UI装饰层
        /// </summary>
        private BucketFacade? facade_;
    }
}

