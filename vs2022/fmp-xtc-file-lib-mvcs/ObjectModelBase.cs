
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.File.LIB.Proto;

namespace XTC.FMP.MOD.File.LIB.MVCS
{
    /// <summary>
    /// Object数据层基类
    /// </summary>
    public class ObjectModelBase : Model
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        public ObjectModelBase(string _uid) : base(_uid)
        {

        }


        /// <summary>
        /// 更新Prepare的数据
        /// </summary>
        /// <param name="_response">Prepare的回复</param>
        public void UpdateProtoPrepare(ObjectPrepareResponse _response)
        {
            getController()?.UpdateProtoPrepare(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Flush的数据
        /// </summary>
        /// <param name="_response">Flush的回复</param>
        public void UpdateProtoFlush(UuidResponse _response)
        {
            getController()?.UpdateProtoFlush(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Get的数据
        /// </summary>
        /// <param name="_response">Get的回复</param>
        public void UpdateProtoGet(ObjectGetResponse _response)
        {
            getController()?.UpdateProtoGet(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Find的数据
        /// </summary>
        /// <param name="_response">Find的回复</param>
        public void UpdateProtoFind(ObjectFindResponse _response)
        {
            getController()?.UpdateProtoFind(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Remove的数据
        /// </summary>
        /// <param name="_response">Remove的回复</param>
        public void UpdateProtoRemove(UuidResponse _response)
        {
            getController()?.UpdateProtoRemove(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新List的数据
        /// </summary>
        /// <param name="_response">List的回复</param>
        public void UpdateProtoList(ObjectListResponse _response)
        {
            getController()?.UpdateProtoList(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Search的数据
        /// </summary>
        /// <param name="_response">Search的回复</param>
        public void UpdateProtoSearch(ObjectSearchResponse _response)
        {
            getController()?.UpdateProtoSearch(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Publish的数据
        /// </summary>
        /// <param name="_response">Publish的回复</param>
        public void UpdateProtoPublish(ObjectPublishResponse _response)
        {
            getController()?.UpdateProtoPublish(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Preview的数据
        /// </summary>
        /// <param name="_response">Preview的回复</param>
        public void UpdateProtoPreview(ObjectPreviewResponse _response)
        {
            getController()?.UpdateProtoPreview(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新Retract的数据
        /// </summary>
        /// <param name="_response">Retract的回复</param>
        public void UpdateProtoRetract(UuidResponse _response)
        {
            getController()?.UpdateProtoRetract(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新ConvertFromBase64的数据
        /// </summary>
        /// <param name="_response">ConvertFromBase64的回复</param>
        public void UpdateProtoConvertFromBase64(ObjectConvertFromBase64Response _response)
        {
            getController()?.UpdateProtoConvertFromBase64(status_ as ObjectModel.ObjectStatus, _response);
        }

        /// <summary>
        /// 更新ConvertFromUrl的数据
        /// </summary>
        /// <param name="_response">ConvertFromUrl的回复</param>
        public void UpdateProtoConvertFromUrl(ObjectConvertFromUrlResponse _response)
        {
            getController()?.UpdateProtoConvertFromUrl(status_ as ObjectModel.ObjectStatus, _response);
        }


        /// <summary>
        /// 获取直系控制层
        /// </summary>
        /// <returns>控制层</returns>
        protected ObjectController? getController()
        {
            if(null == controller_)
                controller_ = findController(ObjectController.NAME) as ObjectController;
            return controller_;
        }

        /// <summary>
        /// 直系控制层
        /// </summary>
        private ObjectController? controller_;
    }
}


