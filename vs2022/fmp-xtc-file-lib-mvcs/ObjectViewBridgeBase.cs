
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using System.Threading.Tasks;
using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.File.LIB.Bridge;

namespace XTC.FMP.MOD.File.LIB.MVCS
{
    /// <summary>
    /// Object的视图桥接层基类（协议部分）
    /// 处理UI的事件
    /// </summary>
    public class ObjectViewBridgeBase : IObjectViewBridge
    {

        /// <summary>
        /// 直系服务层
        /// </summary>
        public ObjectService? service { get; set; }


        /// <summary>
        /// 处理Prepare的提交
        /// </summary>
        /// <param name="_dto">ObjectPrepareRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnPrepareSubmit(IDTO _dto)
        {
            ObjectPrepareRequestDTO? dto = _dto as ObjectPrepareRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallPrepare(dto?.Value);
        }

        /// <summary>
        /// 处理Flush的提交
        /// </summary>
        /// <param name="_dto">ObjectFlushRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnFlushSubmit(IDTO _dto)
        {
            ObjectFlushRequestDTO? dto = _dto as ObjectFlushRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallFlush(dto?.Value);
        }

        /// <summary>
        /// 处理Get的提交
        /// </summary>
        /// <param name="_dto">ObjectGetRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnGetSubmit(IDTO _dto)
        {
            ObjectGetRequestDTO? dto = _dto as ObjectGetRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallGet(dto?.Value);
        }

        /// <summary>
        /// 处理Find的提交
        /// </summary>
        /// <param name="_dto">ObjectFindRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnFindSubmit(IDTO _dto)
        {
            ObjectFindRequestDTO? dto = _dto as ObjectFindRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallFind(dto?.Value);
        }

        /// <summary>
        /// 处理Remove的提交
        /// </summary>
        /// <param name="_dto">ObjectRemoveRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnRemoveSubmit(IDTO _dto)
        {
            ObjectRemoveRequestDTO? dto = _dto as ObjectRemoveRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallRemove(dto?.Value);
        }

        /// <summary>
        /// 处理List的提交
        /// </summary>
        /// <param name="_dto">ObjectListRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnListSubmit(IDTO _dto)
        {
            ObjectListRequestDTO? dto = _dto as ObjectListRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallList(dto?.Value);
        }

        /// <summary>
        /// 处理Search的提交
        /// </summary>
        /// <param name="_dto">ObjectSearchRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnSearchSubmit(IDTO _dto)
        {
            ObjectSearchRequestDTO? dto = _dto as ObjectSearchRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallSearch(dto?.Value);
        }

        /// <summary>
        /// 处理Publish的提交
        /// </summary>
        /// <param name="_dto">ObjectPublishRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnPublishSubmit(IDTO _dto)
        {
            ObjectPublishRequestDTO? dto = _dto as ObjectPublishRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallPublish(dto?.Value);
        }

        /// <summary>
        /// 处理Preview的提交
        /// </summary>
        /// <param name="_dto">ObjectPreviewRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnPreviewSubmit(IDTO _dto)
        {
            ObjectPreviewRequestDTO? dto = _dto as ObjectPreviewRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallPreview(dto?.Value);
        }

        /// <summary>
        /// 处理Retract的提交
        /// </summary>
        /// <param name="_dto">ObjectRetractRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnRetractSubmit(IDTO _dto)
        {
            ObjectRetractRequestDTO? dto = _dto as ObjectRetractRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallRetract(dto?.Value);
        }

        /// <summary>
        /// 处理ConvertFromBase64的提交
        /// </summary>
        /// <param name="_dto">ObjectConvertFromBase64Request的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnConvertFromBase64Submit(IDTO _dto)
        {
            ObjectConvertFromBase64RequestDTO? dto = _dto as ObjectConvertFromBase64RequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallConvertFromBase64(dto?.Value);
        }

        /// <summary>
        /// 处理ConvertFromUrl的提交
        /// </summary>
        /// <param name="_dto">ObjectConvertFromUrlRequest的数据传输对象</param>
        /// <returns>错误</returns>
        public async Task<Error> OnConvertFromUrlSubmit(IDTO _dto)
        {
            ObjectConvertFromUrlRequestDTO? dto = _dto as ObjectConvertFromUrlRequestDTO;
            if(null == service)
            {
                return Error.NewNullErr("service is null");
            }
            return await service.CallConvertFromUrl(dto?.Value);
        }


    }
}
