
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.File.LIB.Proto;

namespace XTC.FMP.MOD.File.LIB.MVCS
{
    /// <summary>
    /// Bucket控制层基类
    /// </summary>
    public class BucketControllerBase : Controller
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        public BucketControllerBase(string _uid) : base(_uid)
        {

        }


        /// <summary>
        /// 更新Make的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Make的回复</param>
        public void UpdateProtoMake(BucketModel.BucketStatus? _status, UuidResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoMake(err, dto);
        }

        /// <summary>
        /// 更新List的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">List的回复</param>
        public void UpdateProtoList(BucketModel.BucketStatus? _status, BucketListResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            BucketListResponseDTO? dto = new BucketListResponseDTO(_response);
            getView()?.RefreshProtoList(err, dto);
        }

        /// <summary>
        /// 更新Remove的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Remove的回复</param>
        public void UpdateProtoRemove(BucketModel.BucketStatus? _status, UuidResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoRemove(err, dto);
        }

        /// <summary>
        /// 更新Get的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Get的回复</param>
        public void UpdateProtoGet(BucketModel.BucketStatus? _status, BucketGetResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            BucketGetResponseDTO? dto = new BucketGetResponseDTO(_response);
            getView()?.RefreshProtoGet(err, dto);
        }

        /// <summary>
        /// 更新Find的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Find的回复</param>
        public void UpdateProtoFind(BucketModel.BucketStatus? _status, BucketFindResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            BucketFindResponseDTO? dto = new BucketFindResponseDTO(_response);
            getView()?.RefreshProtoFind(err, dto);
        }

        /// <summary>
        /// 更新Search的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Search的回复</param>
        public void UpdateProtoSearch(BucketModel.BucketStatus? _status, BucketSearchResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            BucketSearchResponseDTO? dto = new BucketSearchResponseDTO(_response);
            getView()?.RefreshProtoSearch(err, dto);
        }

        /// <summary>
        /// 更新Update的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Update的回复</param>
        public void UpdateProtoUpdate(BucketModel.BucketStatus? _status, UuidResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoUpdate(err, dto);
        }

        /// <summary>
        /// 更新ResetToken的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">ResetToken的回复</param>
        public void UpdateProtoResetToken(BucketModel.BucketStatus? _status, UuidResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoResetToken(err, dto);
        }

        /// <summary>
        /// 更新GenerateManifest的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">GenerateManifest的回复</param>
        public void UpdateProtoGenerateManifest(BucketModel.BucketStatus? _status, BucketGenerateManifestResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            BucketGenerateManifestResponseDTO? dto = new BucketGenerateManifestResponseDTO(_response);
            getView()?.RefreshProtoGenerateManifest(err, dto);
        }

        /// <summary>
        /// 更新Clean的数据
        /// </summary>
        /// <param name="_status">直系状态</param>
        /// <param name="_response">Clean的回复</param>
        public void UpdateProtoClean(BucketModel.BucketStatus? _status, UuidResponse _response)
        {
            Error err = new Error(_response.Status.Code, _response.Status.Message);
            UuidResponseDTO? dto = new UuidResponseDTO(_response);
            getView()?.RefreshProtoClean(err, dto);
        }


        /// <summary>
        /// 获取直系视图层
        /// </summary>
        /// <returns>视图层</returns>
        protected BucketView? getView()
        {
            if(null == view_)
                view_ = findView(BucketView.NAME) as BucketView;
            return view_;
        }

        /// <summary>
        /// 直系视图层
        /// </summary>
        private BucketView? view_;
    }
}
